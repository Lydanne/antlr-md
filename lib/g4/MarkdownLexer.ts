// Generated from ./lib/g4/Markdown.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class MarkdownLexer extends Lexer {
	public static readonly BOLD_TEXT = 1;
	public static readonly ITALIC_TEXT = 2;
	public static readonly INLINE_CODE = 3;
	public static readonly CODE_BLOCK = 4;
	public static readonly TEXT = 5;
	public static readonly HASH = 6;
	public static readonly HASH_WS = 7;
	public static readonly STAR = 8;
	public static readonly DIGITS = 9;
	public static readonly DOT = 10;
	public static readonly WS = 11;
	public static readonly UNDERSCORE = 12;
	public static readonly BACKTICK = 13;
	public static readonly ASTERISK = 14;
	public static readonly DOUBLE_ASTERISK = 15;
	public static readonly DOUBLE_UNDERSCORE = 16;
	public static readonly TRIPLE_BACKTICK = 17;
	public static readonly NL = 18;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"BOLD_TEXT", "ITALIC_TEXT", "INLINE_CODE", "CODE_BLOCK", "TEXT", "HASH", 
		"HASH_WS", "STAR", "DIGITS", "DOT", "WS", "UNDERSCORE", "BACKTICK", "ASTERISK", 
		"DOUBLE_ASTERISK", "DOUBLE_UNDERSCORE", "TRIPLE_BACKTICK", "NL",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, "'#'", 
		undefined, "'*'", undefined, "'.'", undefined, "'_'", "'`'", "'\\'", "'**'", 
		"'__'", "'```'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "BOLD_TEXT", "ITALIC_TEXT", "INLINE_CODE", "CODE_BLOCK", "TEXT", 
		"HASH", "HASH_WS", "STAR", "DIGITS", "DOT", "WS", "UNDERSCORE", "BACKTICK", 
		"ASTERISK", "DOUBLE_ASTERISK", "DOUBLE_UNDERSCORE", "TRIPLE_BACKTICK", 
		"NL",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(MarkdownLexer._LITERAL_NAMES, MarkdownLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return MarkdownLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(MarkdownLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Markdown.g4"; }

	// @Override
	public get ruleNames(): string[] { return MarkdownLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return MarkdownLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return MarkdownLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return MarkdownLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x14\x8D\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x03\x02\x03\x02\x06\x02*\n\x02\r\x02\x0E\x02+\x03\x02" +
		"\x03\x02\x03\x02\x03\x02\x06\x022\n\x02\r\x02\x0E\x023\x03\x02\x03\x02" +
		"\x05\x028\n\x02\x03\x03\x03\x03\x06\x03<\n\x03\r\x03\x0E\x03=\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x06\x03D\n\x03\r\x03\x0E\x03E\x03\x03\x03\x03" +
		"\x05\x03J\n\x03\x03\x04\x03\x04\x06\x04N\n\x04\r\x04\x0E\x04O\x03\x04" +
		"\x03\x04\x03\x05\x03\x05\x07\x05V\n\x05\f\x05\x0E\x05Y\v\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x06\x06\x06`\n\x06\r\x06\x0E\x06a\x03\x07\x03" +
		"\x07\x03\b\x06\bg\n\b\r\b\x0E\bh\x03\b\x03\b\x03\t\x03\t\x03\n\x06\np" +
		"\n\n\r\n\x0E\nq\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03" +
		"\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03" +
		"\x12\x03\x12\x03\x12\x03\x12\x03\x13\x05\x13\x8A\n\x13\x03\x13\x03\x13" +
		"\x03W\x02\x02\x14\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02" +
		"\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02" +
		"\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\x03" +
		"\x02\b\x05\x02\f\f\x0F\x0F,,\x05\x02\f\f\x0F\x0Faa\x05\x02\f\f\x0F\x0F" +
		"bb\x07\x02\f\f\x0F\x0F%%,,ab\x03\x022;\x04\x02\v\v\"\"\x02\x98\x02\x03" +
		"\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t" +
		"\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03" +
		"\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03" +
		"\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03" +
		"\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03" +
		"\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x037\x03\x02\x02" +
		"\x02\x05I\x03\x02\x02\x02\x07K\x03\x02\x02\x02\tS\x03\x02\x02\x02\v_\x03" +
		"\x02\x02\x02\rc\x03\x02\x02\x02\x0Ff\x03\x02\x02\x02\x11l\x03\x02\x02" +
		"\x02\x13o\x03\x02\x02\x02\x15s\x03\x02\x02\x02\x17u\x03\x02\x02\x02\x19" +
		"w\x03\x02\x02\x02\x1By\x03\x02\x02\x02\x1D{\x03\x02\x02\x02\x1F~\x03\x02" +
		"\x02\x02!\x81\x03\x02\x02\x02#\x84\x03\x02\x02\x02%\x89\x03\x02\x02\x02" +
		"\')\x05\x1F\x10\x02(*\n\x02\x02\x02)(\x03\x02\x02\x02*+\x03\x02\x02\x02" +
		"+)\x03\x02\x02\x02+,\x03\x02\x02\x02,-\x03\x02\x02\x02-.\x05\x1F\x10\x02" +
		".8\x03\x02\x02\x02/1\x05!\x11\x0202\n\x03\x02\x0210\x03\x02\x02\x0223" +
		"\x03\x02\x02\x0231\x03\x02\x02\x0234\x03\x02\x02\x0245\x03\x02\x02\x02" +
		"56\x05!\x11\x0268\x03\x02\x02\x027\'\x03\x02\x02\x027/\x03\x02\x02\x02" +
		"8\x04\x03\x02\x02\x029;\x05\x1D\x0F\x02:<\n\x02\x02\x02;:\x03\x02\x02" +
		"\x02<=\x03\x02\x02\x02=;\x03\x02\x02\x02=>\x03\x02\x02\x02>?\x03\x02\x02" +
		"\x02?@\x05\x1D\x0F\x02@J\x03\x02\x02\x02AC\x05\x19\r\x02BD\n\x03\x02\x02" +
		"CB\x03\x02\x02\x02DE\x03\x02\x02\x02EC\x03\x02\x02\x02EF\x03\x02\x02\x02" +
		"FG\x03\x02\x02\x02GH\x05\x19\r\x02HJ\x03\x02\x02\x02I9\x03\x02\x02\x02" +
		"IA\x03\x02\x02\x02J\x06\x03\x02\x02\x02KM\x05\x1B\x0E\x02LN\n\x04\x02" +
		"\x02ML\x03\x02\x02\x02NO\x03\x02\x02\x02OM\x03\x02\x02\x02OP\x03\x02\x02" +
		"\x02PQ\x03\x02\x02\x02QR\x05\x1B\x0E\x02R\b\x03\x02\x02\x02SW\x05#\x12" +
		"\x02TV\v\x02\x02\x02UT\x03\x02\x02\x02VY\x03\x02\x02\x02WX\x03\x02\x02" +
		"\x02WU\x03\x02\x02\x02XZ\x03\x02\x02\x02YW\x03\x02\x02\x02Z[\x05#\x12" +
		"\x02[\\\x03\x02\x02\x02\\]\b\x05\x02\x02]\n\x03\x02\x02\x02^`\n\x05\x02" +
		"\x02_^\x03\x02\x02\x02`a\x03\x02\x02\x02a_\x03\x02\x02\x02ab\x03\x02\x02" +
		"\x02b\f\x03\x02\x02\x02cd\x07%\x02\x02d\x0E\x03\x02\x02\x02eg\x05\r\x07" +
		"\x02fe\x03\x02\x02\x02gh\x03\x02\x02\x02hf\x03\x02\x02\x02hi\x03\x02\x02" +
		"\x02ij\x03\x02\x02\x02jk\x05\x17\f\x02k\x10\x03\x02\x02\x02lm\x07,\x02" +
		"\x02m\x12\x03\x02\x02\x02np\t\x06\x02\x02on\x03\x02\x02\x02pq\x03\x02" +
		"\x02\x02qo\x03\x02\x02\x02qr\x03\x02\x02\x02r\x14\x03\x02\x02\x02st\x07" +
		"0\x02\x02t\x16\x03\x02\x02\x02uv\t\x07\x02\x02v\x18\x03\x02\x02\x02wx" +
		"\x07a\x02\x02x\x1A\x03\x02\x02\x02yz\x07b\x02\x02z\x1C\x03\x02\x02\x02" +
		"{|\x07^\x02\x02|}\x07,\x02\x02}\x1E\x03\x02\x02\x02~\x7F\x07,\x02\x02" +
		"\x7F\x80\x07,\x02\x02\x80 \x03\x02\x02\x02\x81\x82\x07a\x02\x02\x82\x83" +
		"\x07a\x02\x02\x83\"\x03\x02\x02\x02\x84\x85\x07b\x02\x02\x85\x86\x07b" +
		"\x02\x02\x86\x87\x07b\x02\x02\x87$\x03\x02\x02\x02\x88\x8A\x07\x0F\x02" +
		"\x02\x89\x88\x03\x02\x02\x02\x89\x8A\x03\x02\x02\x02\x8A\x8B\x03\x02\x02" +
		"\x02\x8B\x8C\x07\f\x02\x02\x8C&\x03\x02\x02\x02\x0F\x02+37=EIOWahq\x89" +
		"\x03\x04\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!MarkdownLexer.__ATN) {
			MarkdownLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(MarkdownLexer._serializedATN));
		}

		return MarkdownLexer.__ATN;
	}

}

